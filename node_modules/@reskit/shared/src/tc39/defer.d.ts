interface Deferred<T = void> {
    promise: Promise<T>;
    isResolved: boolean;
    isRejected: boolean;
    isFinished: boolean;
    value?: T;
    resolve: (value: T) => void;
    reject: (reason: unknown) => void;
    cancel: (reason?: unknown) => void;
}
declare function createDefer<T = void>(): Deferred<T>;
declare function createResolvedDefer<T = void>(value: T): Deferred<T>;
declare function createTimeoutDefer(duration?: number): Deferred<void>;
export { type Deferred, createDefer, createTimeoutDefer, createResolvedDefer, };
