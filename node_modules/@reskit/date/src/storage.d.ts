declare let dateTimeOffsetMap: Record<string, Record<string, number>>;
declare function useDateTimeOffset(date: string, time: string): number;
declare let useTimeOffsetRegexp: () => Record<string, RegExp>;
declare let specialTimeMap: Record<string, number>;
declare function useSpecialTime(date: keyof typeof specialTimeMap): number;
declare let useSpecialTimeRegexp: () => RegExp;
declare let useStandardDateRegexp: () => Record<string, RegExp>;
declare function useDateSplitRegexp(): RegExp;
interface IDateTime {
    year: number;
    month: number;
    date: number;
    hour: number;
    minute: number;
    week?: number;
}
declare function useCurrentDate(): IDateTime;
declare function createDateTime(dateTime: IDateTime): Date;
declare function isEqualDate(date1: IDateTime, date2: IDateTime): boolean;
declare function setLocalized(localized: {
    useTimeOffsetRegexp: () => Record<string, RegExp>;
    useSpecialTimeRegexp: () => RegExp;
    useStandardDateRegexp: () => Record<string, RegExp>;
    dateSplitList: string[];
    specialTimeMap: Record<string, number>;
    dateTimeOffsetMap: Record<string, Record<string, number>>;
}): void;
export { setLocalized, isEqualDate, dateTimeOffsetMap, useTimeOffsetRegexp, useDateTimeOffset, useSpecialTimeRegexp, useSpecialTime, useStandardDateRegexp, createDateTime, useCurrentDate, useDateSplitRegexp, };
